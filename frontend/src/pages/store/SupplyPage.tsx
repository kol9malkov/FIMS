import {useEffect, useState} from 'react'
import {Link} from 'react-router-dom'
import {useAuth} from '@/contexts/AuthContext'
import {STATUSES, getSupplies, type Supply, type SupplyStatus, deliverSupply} from '@/api/supplies'


const SupplyPage = () => {
    const {storeId, role} = useAuth()
    const isAdmin = role === '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'

    const [supplies, setSupplies] = useState<Supply[]>([])
    const [search, setSearch] = useState('')
    const [status, setStatus] = useState<SupplyStatus | ''>('') // —Å—Ç—Ä–æ–≥–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è
    const [page, setPage] = useState(1)
    const [limit] = useState(10)
    const [loading, setLoading] = useState(true)
    const [error, setError] = useState<string | null>(null)

    const fetchData = async () => {
        setLoading(true)
        try {
            const data = await getSupplies(
                search,
                page,
                limit,
                isAdmin ? undefined : storeId || undefined,
                status || undefined
            )
            setSupplies(data)
            setError(null)
        } catch {
            setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–∞–≤–æ–∫')
        } finally {
            setLoading(false)
        }
    }

    useEffect(() => {
        fetchData()
    }, [search, page, status, storeId])

    const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
        setSearch(e.target.value)
        setPage(1)
    }

    const formatDate = (iso: string) => {
        const date = new Date(iso)
        return date.toLocaleDateString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
        })
    }

    return (
        <div className="container py-4">
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∞ */}
            <div className="d-flex justify-content-between align-items-center mb-4 flex-wrap gap-2">
                <h2 className="fw-bold mb-0">üöö –ü–æ—Å—Ç–∞–≤–∫–∏</h2>
                <Link to="/store/supplies/create" className="btn btn-primary">
                    + –ù–æ–≤–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞
                </Link>
            </div>

            {/* –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É */}
            <div className="d-flex flex-wrap gap-2 mb-3">
                <button
                    onClick={() => setStatus('')}
                    className={`btn btn-sm ${status === '' ? 'btn-primary' : 'btn-outline-secondary'}`}
                >
                    –í—Å–µ
                </button>
                {STATUSES.map((s) => (
                    <button
                        key={s}
                        onClick={() => {
                            setStatus(s)
                            setPage(1)
                        }}
                        className={`btn btn-sm ${status === s ? 'btn-primary' : 'btn-outline-secondary'}`}
                    >
                        {s}
                    </button>
                ))}
            </div>

            {/* –ü–æ–∏—Å–∫ */}
            <div className="mb-3">
                <input
                    type="text"
                    value={search}
                    onChange={handleSearch}
                    placeholder="–ü–æ–∏—Å–∫ –ø–æ –º–∞–≥–∞–∑–∏–Ω—É, –ø–æ—Å—Ç–∞–≤—â–∏–∫—É –∏–ª–∏ —Å—Ç–∞—Ç—É—Å—É"
                    className="form-control"
                    style={{maxWidth: '400px'}}
                />
            </div>

            {/* –ó–∞–≥—Ä—É–∑–∫–∞ / –æ—à–∏–±–∫–∞ */}
            {loading && (
                <div className="text-center text-muted py-4">
                    <div className="spinner-border text-primary me-2" role="status"/>
                    –ó–∞–≥—Ä—É–∑–∫–∞...
                </div>
            )}
            {error && (
                <div className="alert alert-danger" role="alert">
                    {error}
                </div>
            )}

            {/* –¢–∞–±–ª–∏—Ü–∞ */}
            {!loading && !error && (
                <>
                    <div className="table-responsive mb-4">
                        <table className="table table-hover table-striped align-middle text-sm">
                            <thead className="table-light">
                            <tr>
                                <th>ID</th>
                                <th>–ú–∞–≥–∞–∑–∏–Ω</th>
                                <th>–ü–æ—Å—Ç–∞–≤—â–∏–∫</th>
                                <th>–î–∞—Ç–∞</th>
                                <th>–°—Ç–∞—Ç—É—Å</th>
                                <th>–ü–æ–∑–∏—Ü–∏–π</th>
                                <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                            </tr>
                            </thead>
                            <tbody>
                            {supplies.map((supply) => (
                                <tr key={supply.supply_id}>
                                    <td>#{supply.supply_id}</td>
                                    <td>{supply.store_name}</td>
                                    <td>{supply.supplier_name}</td>
                                    <td>{formatDate(supply.supply_date)}</td>
                                    <td>
                  <span
                      className={`badge rounded-pill ${
                          supply.status === '–û–∂–∏–¥–∞–µ—Ç—Å—è'
                              ? 'bg-warning text-dark'
                              : supply.status === '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'
                                  ? 'bg-info'
                                  : supply.status === '–ü—Ä–∏–Ω—è—Ç–æ'
                                      ? 'bg-success'
                                      : 'bg-secondary'
                      }`}
                  >
                    {supply.status}
                  </span>
                                    </td>
                                    <td>{supply.supply_items.length}</td>
                                    <td>
                                        <div className="d-flex gap-2 flex-wrap align-items-center">
                                            <Link
                                                to={`/store/supplies/id/${supply.supply_id}`}
                                                className="btn btn-sm btn-outline-primary"
                                            >
                                                –î–µ—Ç–∞–ª–∏
                                            </Link>
                                            {supply.status === '–û–∂–∏–¥–∞–µ—Ç—Å—è' ? (
                                                <button
                                                    className="btn btn-sm btn-outline-success"
                                                    onClick={async () => {
                                                        try {
                                                            await deliverSupply(supply.supply_id, storeId ?? undefined)
                                                            await fetchData()
                                                        } catch (e: any) {
                                                            alert(e?.response?.data?.detail || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø–æ—Å—Ç–∞–≤–∫–∏')
                                                        }
                                                    }}
                                                >
                                                    –ü—Ä–∏–Ω—è—Ç—å
                                                </button>
                                            ) : (
                                                <span className="text-muted small">‚úì</span>
                                            )}
                                        </div>
                                    </td>
                                </tr>
                            ))}
                            </tbody>
                        </table>
                    </div>

                    {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
                    <div className="d-flex justify-content-between align-items-center">
                        <button
                            onClick={() => setPage((p) => Math.max(1, p - 1))}
                            className="btn btn-outline-secondary"
                            disabled={page === 1}
                        >
                            ‚Üê –ù–∞–∑–∞–¥
                        </button>
                        <span className="text-muted">–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}</span>
                        <button
                            onClick={() => setPage((p) => p + 1)}
                            className="btn btn-outline-secondary"
                            disabled={supplies.length < limit}
                        >
                            –í–ø–µ—Ä—ë–¥ ‚Üí
                        </button>
                    </div>
                </>
            )}
        </div>

    )
}

export default SupplyPage
