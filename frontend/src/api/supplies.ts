import api from './api'

const API_URL = '/store/supplies'

// üí° –°—Ç—Ä–æ–≥–æ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å—Ç–∞—Ç—É—Å–æ–≤
export const STATUSES = [
    '–û–∂–∏–¥–∞–µ—Ç—Å—è',
    '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ',
    '–ü—Ä–∏–Ω—è—Ç–æ —á–∞—Å—Ç–∏—á–Ω–æ',
    '–ü—Ä–∏–Ω—è—Ç–æ',
    '–ó–∞–∫—Ä—ã—Ç–æ',
] as const

// üí° –¢–∏–ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–≤–æ–¥–∏—Ç—Å—è –∏–∑ –º–∞—Å—Å–∏–≤–∞
export type SupplyStatus = (typeof STATUSES)[number]

export interface SupplyItem {
    supply_item_id: number
    product_id: number
    product_name: string
    quantity: number
    received_quantity: number
    is_received: boolean
}

export interface Supply {
    supply_id: number
    store_id: number
    store_name: string
    supply_date: string
    supplier_name: string
    status: SupplyStatus
    supply_items: SupplyItem[]
}

export interface SupplyItemInput {
    product_id: number
    quantity: number
    price: number
}

export interface CreateSupplyPayload {
    store_id: number
    supplier_name: string
    supply_date: string
    supply_items: SupplyItemInput[]
}

// üëá –¢–∏–ø –¥–ª—è PATCH –ø–æ–∑–∏—Ü–∏–∏
export interface SupplyItemUpdate {
    received_quantity: number
    is_received: boolean
}

export const getSupplies = async (
    search: string,
    page: number,
    limit: number,
    storeId?: string,
    status?: string
): Promise<Supply[]> => {
    const skip = (page - 1) * limit

    const params: Record<string, string> = {
        search,
        skip: skip.toString(),
        limit: limit.toString(),
    }

    if (status) {
        params.status = status
    }

    const headers: Record<string, string> = {}
    if (storeId) {
        headers['X-Store-ID'] = storeId
    }

    const response = await api.get<Supply[]>(API_URL, {
        params,
        headers,
    })

    return response.data
}

export const createSupply = async (
    payload: CreateSupplyPayload,
    storeId?: string
): Promise<void> => {
    const headers: Record<string, string> = {}
    if (storeId) {
        headers['X-Store-ID'] = storeId
    }

    await api.post(`${API_URL}/create`, payload, {headers})
}


// –ü–æ–ª—É—á–∏—Ç—å –æ–¥–Ω—É –ø–æ—Å—Ç–∞–≤–∫—É –ø–æ ID
export const getSupplyById = async (
    supplyId: number,
    storeId?: string
): Promise<Supply> => {
    const headers: Record<string, string> = {}
    if (storeId) {
        headers['X-Store-ID'] = storeId
    }

    const response = await api.get<Supply>(`${API_URL}/id/${supplyId}`, {
        headers,
    })

    return response.data
}

// –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")
export const deliverSupply = async (
    supplyId: number,
    storeId?: string
): Promise<Supply> => {
    const headers: Record<string, string> = {}
    if (storeId) {
        headers['X-Store-ID'] = storeId
    }

    const response = await api.post<Supply>(`${API_URL}/${supplyId}/deliver`, null, {
        headers,
    })

    return response.data
}

// –û–±–Ω–æ–≤–∏—Ç—å –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é –ø–æ—Å—Ç–∞–≤–∫–∏
export const updateSupplyItem = async (
    supplyId: number,
    itemId: number,
    data: SupplyItemUpdate,
    storeId?: string
): Promise<SupplyItem> => {
    const headers: Record<string, string> = {}
    if (storeId) {
        headers['X-Store-ID'] = storeId
    }

    const response = await api.patch<SupplyItem>(
        `/store/supplies/${supplyId}/${itemId}`,
        data,
        {headers}
    )
    return response.data
}

// –ó–∞–∫—Ä—ã—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É
export const closeSupply = async (
    supplyId: number,
    storeId?: string
): Promise<Supply> => {
    const headers: Record<string, string> = {}
    if (storeId) {
        headers['X-Store-ID'] = storeId
    }

    const response = await api.post<Supply>(`${API_URL}/${supplyId}/close`, null, {
        headers,
    })

    return response.data
}